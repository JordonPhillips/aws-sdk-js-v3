import {
  _HyperParameterSpecification,
  _UnmarshalledHyperParameterSpecification
} from "./_HyperParameterSpecification";
import {
  _MetricDefinition,
  _UnmarshalledMetricDefinition
} from "./_MetricDefinition";
import {
  _ChannelSpecification,
  _UnmarshalledChannelSpecification
} from "./_ChannelSpecification";
import {
  _HyperParameterTuningJobObjective,
  _UnmarshalledHyperParameterTuningJobObjective
} from "./_HyperParameterTuningJobObjective";

/**
 * <p>Defines how the algorithm is used for a training job.</p>
 */
export interface _TrainingSpecification {
  /**
   * <p>The Amazon ECR registry path of the Docker image that contains the training algorithm.</p>
   */
  TrainingImage: string;

  /**
   * <p>An MD5 hash of the training algorithm that identifies the Docker image used for training.</p>
   */
  TrainingImageDigest?: string;

  /**
   * <p>A list of the <code>HyperParameterSpecification</code> objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.&gt;</p>
   */
  SupportedHyperParameters?:
    | Array<_HyperParameterSpecification>
    | Iterable<_HyperParameterSpecification>;

  /**
   * <p>A list of the instance types that this algorithm can use for training.</p>
   */
  SupportedTrainingInstanceTypes:
    | Array<
        | "ml.m4.xlarge"
        | "ml.m4.2xlarge"
        | "ml.m4.4xlarge"
        | "ml.m4.10xlarge"
        | "ml.m4.16xlarge"
        | "ml.m5.large"
        | "ml.m5.xlarge"
        | "ml.m5.2xlarge"
        | "ml.m5.4xlarge"
        | "ml.m5.12xlarge"
        | "ml.m5.24xlarge"
        | "ml.c4.xlarge"
        | "ml.c4.2xlarge"
        | "ml.c4.4xlarge"
        | "ml.c4.8xlarge"
        | "ml.p2.xlarge"
        | "ml.p2.8xlarge"
        | "ml.p2.16xlarge"
        | "ml.p3.2xlarge"
        | "ml.p3.8xlarge"
        | "ml.p3.16xlarge"
        | "ml.c5.xlarge"
        | "ml.c5.2xlarge"
        | "ml.c5.4xlarge"
        | "ml.c5.9xlarge"
        | "ml.c5.18xlarge"
        | string
      >
    | Iterable<
        | "ml.m4.xlarge"
        | "ml.m4.2xlarge"
        | "ml.m4.4xlarge"
        | "ml.m4.10xlarge"
        | "ml.m4.16xlarge"
        | "ml.m5.large"
        | "ml.m5.xlarge"
        | "ml.m5.2xlarge"
        | "ml.m5.4xlarge"
        | "ml.m5.12xlarge"
        | "ml.m5.24xlarge"
        | "ml.c4.xlarge"
        | "ml.c4.2xlarge"
        | "ml.c4.4xlarge"
        | "ml.c4.8xlarge"
        | "ml.p2.xlarge"
        | "ml.p2.8xlarge"
        | "ml.p2.16xlarge"
        | "ml.p3.2xlarge"
        | "ml.p3.8xlarge"
        | "ml.p3.16xlarge"
        | "ml.c5.xlarge"
        | "ml.c5.2xlarge"
        | "ml.c5.4xlarge"
        | "ml.c5.9xlarge"
        | "ml.c5.18xlarge"
        | string
      >;

  /**
   * <p>Indicates whether the algorithm supports distributed training. If set to false, buyers canâ€™t request more than one instance during training.</p>
   */
  SupportsDistributedTraining?: boolean;

  /**
   * <p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics generated by the algorithm.</p>
   */
  MetricDefinitions?: Array<_MetricDefinition> | Iterable<_MetricDefinition>;

  /**
   * <p>A list of <code>ChannelSpecification</code> objects, which specify the input sources to be used by the algorithm.</p>
   */
  TrainingChannels:
    | Array<_ChannelSpecification>
    | Iterable<_ChannelSpecification>;

  /**
   * <p>A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.</p>
   */
  SupportedTuningJobObjectiveMetrics?:
    | Array<_HyperParameterTuningJobObjective>
    | Iterable<_HyperParameterTuningJobObjective>;
}

export interface _UnmarshalledTrainingSpecification
  extends _TrainingSpecification {
  /**
   * <p>A list of the <code>HyperParameterSpecification</code> objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.&gt;</p>
   */
  SupportedHyperParameters?: Array<_UnmarshalledHyperParameterSpecification>;

  /**
   * <p>A list of the instance types that this algorithm can use for training.</p>
   */
  SupportedTrainingInstanceTypes: Array<
    | "ml.m4.xlarge"
    | "ml.m4.2xlarge"
    | "ml.m4.4xlarge"
    | "ml.m4.10xlarge"
    | "ml.m4.16xlarge"
    | "ml.m5.large"
    | "ml.m5.xlarge"
    | "ml.m5.2xlarge"
    | "ml.m5.4xlarge"
    | "ml.m5.12xlarge"
    | "ml.m5.24xlarge"
    | "ml.c4.xlarge"
    | "ml.c4.2xlarge"
    | "ml.c4.4xlarge"
    | "ml.c4.8xlarge"
    | "ml.p2.xlarge"
    | "ml.p2.8xlarge"
    | "ml.p2.16xlarge"
    | "ml.p3.2xlarge"
    | "ml.p3.8xlarge"
    | "ml.p3.16xlarge"
    | "ml.c5.xlarge"
    | "ml.c5.2xlarge"
    | "ml.c5.4xlarge"
    | "ml.c5.9xlarge"
    | "ml.c5.18xlarge"
    | string
  >;

  /**
   * <p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics generated by the algorithm.</p>
   */
  MetricDefinitions?: Array<_UnmarshalledMetricDefinition>;

  /**
   * <p>A list of <code>ChannelSpecification</code> objects, which specify the input sources to be used by the algorithm.</p>
   */
  TrainingChannels: Array<_UnmarshalledChannelSpecification>;

  /**
   * <p>A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.</p>
   */
  SupportedTuningJobObjectiveMetrics?: Array<
    _UnmarshalledHyperParameterTuningJobObjective
  >;
}
