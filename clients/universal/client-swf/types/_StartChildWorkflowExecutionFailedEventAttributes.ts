import { _WorkflowType, _UnmarshalledWorkflowType } from "./_WorkflowType";

/**
 * <p>Provides the details of the <code>StartChildWorkflowExecutionFailed</code> event.</p>
 */
export interface _StartChildWorkflowExecutionFailedEventAttributes {
  /**
   * <p>The workflow type provided in the <code>StartChildWorkflowExecution</code> <a>Decision</a> that failed.</p>
   */
  workflowType: _WorkflowType;

  /**
   * <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note> <p>When <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision fails because it lacks sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html"> Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> </note>
   */
  cause:
    | "WORKFLOW_TYPE_DOES_NOT_EXIST"
    | "WORKFLOW_TYPE_DEPRECATED"
    | "OPEN_CHILDREN_LIMIT_EXCEEDED"
    | "OPEN_WORKFLOWS_LIMIT_EXCEEDED"
    | "CHILD_CREATION_RATE_EXCEEDED"
    | "WORKFLOW_ALREADY_RUNNING"
    | "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
    | "DEFAULT_TASK_LIST_UNDEFINED"
    | "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
    | "DEFAULT_CHILD_POLICY_UNDEFINED"
    | "OPERATION_NOT_PERMITTED"
    | string;

  /**
   * <p>The <code>workflowId</code> of the child workflow execution.</p>
   */
  workflowId: string;

  /**
   * <p>When the <code>cause</code> is <code>WORKFLOW_ALREADY_RUNNING</code>, <code>initiatedEventId</code> is the ID of the <code>StartChildWorkflowExecutionInitiated</code> event that corresponds to the <code>StartChildWorkflowExecution</code> <a>Decision</a> to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event.</p> <p>When the <code>cause</code> isn't <code>WORKFLOW_ALREADY_RUNNING</code>, <code>initiatedEventId</code> is set to <code>0</code> because the <code>StartChildWorkflowExecutionInitiated</code> event doesn't exist.</p>
   */
  initiatedEventId: number;

  /**
   * <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>StartChildWorkflowExecution</code> <a>Decision</a> to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.</p>
   */
  decisionTaskCompletedEventId: number;

  /**
   * <p>The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.</p>
   */
  control?: string;
}

export interface _UnmarshalledStartChildWorkflowExecutionFailedEventAttributes
  extends _StartChildWorkflowExecutionFailedEventAttributes {
  /**
   * <p>The workflow type provided in the <code>StartChildWorkflowExecution</code> <a>Decision</a> that failed.</p>
   */
  workflowType: _UnmarshalledWorkflowType;
}
